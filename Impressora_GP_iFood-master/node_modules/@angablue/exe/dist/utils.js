"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.warningSuppression = exports.execAsync = void 0;
exports.signtool = signtool;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const util_1 = require("util");
const signtoolPackagePath = require.resolve('signtool');
exports.execAsync = (0, util_1.promisify)(child_process_1.exec);
/**
 * Get the path to the signtool executable.
 * @returns The path to the signtool executable.
 */
function getSigntoolPath() {
    const signtoolPath = path_1.default.dirname(signtoolPackagePath);
    switch (process.arch) {
        case 'ia32':
            return path_1.default.join(signtoolPath, 'signtool', 'x86', 'signtool.exe').replace(/\\/g, '/');
        case 'x64':
            return path_1.default.join(signtoolPath, 'signtool', 'x64', 'signtool.exe').replace(/\\/g, '/');
        case 'arm':
        default:
            throw new Error('Signtool is not supported in this environment');
    }
}
/**
 * Sign a file using signtool.
 * @param args Arguments to pass to signtool.
 * @returns A promise that resolves when the file is signed.
 */
function signtool(args) {
    const signtoolPath = getSigntoolPath();
    return (0, exports.execAsync)(`"${signtoolPath}" ${args.join(' ')}`);
}
exports.warningSuppression = "const originalError=console.error;console.error=(msg,...args)=>{if(typeof msg==='string'&&msg.includes('Single executable application is an experimental feature and might change at any time')||msg.includes('Currently the require() provided to the main script embedded into single-executable applications only supports loading built-in modules.'))return;originalError(msg,...args);};";
